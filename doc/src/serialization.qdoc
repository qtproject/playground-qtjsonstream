/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of JsonStream
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\title JSON Stream Serialization
\target serialization
\page serialization.html

\section1 Stream serialization

One key challenge with JSON is that there are a number of different
ways that JSON can be serialized to be sent over a socket connection:
\list
 \o UTF-8 encoded (the default)
 \o UTF-16 LE or BE
 \o UTF-32 LE or BE
 \o \l {http://bsonspec.org} {BSON} (Binary JSON)
 \o \l Qt Json [ssh://codereview.qt-project.org:29418/playground/qtbinaryjson.git]
\endlist
For a discussion of the UTF encoding formats, see \l
{http://www.ietf.org/rfc/rfc4627} {RFC4627}.

The JSON stream reference supports all standard encoding formats by
\bold{auto-detection}.  The server class assumes that communication
will be initiated by the client. The initial bytes received are
matched to the signature of one of the serialization techniques and
the connection is set to that format.

To be specific, the server matches (table data from \l
{http://www.ietf.org/rfc/rfc4627} {RFC4627}):
\table
\header
  \o Encoding
  \o Bytes
  \o Discussion
\row
  \o UTF-8
  \o 7B xx yy zz
  \o First byte should be the '{' character, followed by whitespace
     and a '"' quotation mark.
\row
  \o BSON
  \o 62 73 6F 6E
  \o First four bytes are 'bson'.  Strictly speaking, this is
     not the true BSON format (which starts with an int32 length)
     but in the interests of autodetection we've enforced this
     requirement.  The BSON packet follows.
\row
  \o QBJS
  \o 71 62 6A 73
  \o First four bytes are 'qbjs'.  This matches the standard
     QtJson::JsonDocument header.
\row
  \o UTF-32BE
  \o 00 00 00 7B
  \o First four bytes should be the '{' character
\row
  \o UTF-32LE
  \o 7B 00 00 00
  \o First four bytes should be the '{' character.
\row
  \o Raw UTF-16BE
  \o 00 7B 00 xx
  \o First two bytes should be the '{' character.
\row
  \o Raw UTF-16LE
  \o 7B 00 xx 00
  \o First two bytes should be the '{' character.
\row
  \o UTF-16BE with BOM
  \o FE FF 00 7B
  \o U+FEFF + '{'
\row
  \o UTF-16LE with BOM
  \o FF FE 7B 00
  \o U+FEFF + '{'
\endtable

Clearly, there is a danger that the BSON encoding format could be
confused with UTF-32LE, UTF-16BE, UTF-16LE, or even UTF-8 (for
example, "7B 20 7D 00" which is '{ }'). To avoid confusion, it is
recommended that UTF-16 encodings send a BOM (U+FEFF) character to
start their stream.  When in doubt, the protcol will select UTF
encoding formats before BSON, which means that UTF-32LE is
particularly susceptable to being done incorrectly.

\warning We probably will disallow UTF-32 encoding formats to resolve
         ambiguity.  Or, we may require a BSON header to be
         transmitted to avoid confusion.

Packet sizes are limited by this protocol.  If too large of a packet
is received (typically 65535 bytes), the connection will be dropped.

*/
